name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, windows-2022]
        compiler: [gcc, clang, cl]
        build_type: [debug, release]
        exclude:
          - os: windows-2022
            compiler: gcc
          - os: windows-2022
            compiler: clang
          - os: ubuntu-22.04
            compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install Ubuntu packages
      if: matrix.os == 'ubuntu-22.04'
      run: |
        sudo apt-get update -y
        sudo apt-get install -y python3 pip g++-12 clang-14 binutils ocl-icd-opencl-dev

    - name: Setup MSVC
      if: matrix.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Install Windows dependencies
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
        python -m pip install --upgrade pip

    - name: Install conan and set venv
      shell: bash
      run: python3 -m venv .venv;
           source .venv/bin/activate;
           echo PATH=$PATH >> $GITHUB_ENV;
           pip install conan==2.12.1;

    - name: Install conan requirements
      run: >
        conan profile detect --force;
        conan install .
        -pr=ci/profiles/${{ matrix.os }}/${{ matrix.compiler }}_${{ matrix.build_type }}.profile
        --output-folder=build
        --build=missing

    - name: Configure CMake
      run: >
        cmake . -B build --preset conan-${{ matrix.build_type }}

    - name: Build
      run:
        cmake --build build -j

    # no tests here because it runs on GPUless runner and we can only check buildability here
    # tests can be run locally
